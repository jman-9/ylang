LValue -> Id | PostfixExp '.' Id | PostfixExp '[' Exp ']'
AssignOp -> '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '|=' | '^='
Exp -> AssignExp
AssignExp -> OrExp | LValue AssignOp AssignExp
OrExp -> AndExp | OrExp '||' AndExp
AndExp   -> BitOrExp | AndExp '&&' BitOrExp
BitOrExp -> BitXorExp | BitOrExp '|' BitXorExp
BitXorExp-> BitAndExp | BitXorExp '^' BitAndExp
BitAndExp-> EqualExp | BitAndExp '&' EqualExp
EqualExp -> RelExp | EqualExp ('==' | '!=') RelExp
RelExp   -> ShiftExp | RelExp ('<' | '<=' | '>' | '>=') ShiftExp
ShiftExp -> AddExp | ShiftExp ('<<' | '>>') AddExp
AddExp   -> MulExp | AddExp ('+' | '-') MulExp
MulExp   -> UnaryExp | MulExp ('*' | '/' | '%') UnaryExp
PrefixExp -> ('!' | '~' | '+' | '-') PrefixExp | PostfixExp
PostfixExp â†’ PrimaryExp | PostfixExp '(' [ Args ] ')' | PostfixExp '[' Exp ']' | PostfixExp '.' Id
Args -> Exp { ',' Exp }
PrimaryExp -> '(' Exp ')' | Id | Literal


Code -> {Stmt}
Stmt -> Exp | CompoundStmt | IfStmt | ForStmt
CompoundStmt -> '{' {Stmt} '}'
IfStmt -> 'if' '(' Exp ')' Stmt ['else' Stmt]
ForStmt -> 'for' '(' [Exp] ';' [Exp] ';' [Exp] ')' Stmt
