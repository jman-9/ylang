LValue -> Id | PostfixExp '.' Id | PostfixExp '[' Exp ']'
AssignOp -> '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '|=' | '^='
Args -> Exp {',' Exp}

Exp -> AssignExp
AssignExp -> OrExp | LValue AssignOp AssignExp
OrExp -> AndExp | OrExp '||' AndExp
AndExp   -> BitOrExp | AndExp '&&' BitOrExp
BitOrExp -> BitXorExp | BitOrExp '|' BitXorExp
BitXorExp-> BitAndExp | BitXorExp '^' BitAndExp
BitAndExp-> EqualExp | BitAndExp '&' EqualExp
EqualExp -> RelExp | EqualExp ('==' | '!=') RelExp
RelExp   -> ShiftExp | RelExp ('<' | '<=' | '>' | '>=') ShiftExp
ShiftExp -> AddExp | ShiftExp ('<<' | '>>') AddExp
AddExp   -> MulExp | AddExp ('+' | '-') MulExp
MulExp   -> UnaryExp | MulExp ('*' | '/' | '%') PrefixExp
PrefixExp -> ('!' | '~' | '+' | '-') PrefixExp | PostfixExp
PostfixExp â†’ PrimaryExp { '(' [Args] ')' | '[' Exp ']' | '.' Id }
PrimaryExp -> '('Exp')' | Id | Literal

Code -> {Stmt}
Stmt -> Exp ';' | CompoundStmt | IfStmt | ForStmt | FnStmt | ReturnStmt | KeyStmt ';'
CompoundStmt -> '{'{Stmt}'}'
IfStmt -> 'if' '('Exp')' Stmt ['else' Stmt]
ForStmt -> 'for' '('[Exp]';' [Exp]';' [Exp]')' Stmt
FnStmt -> 'fn' Id '('[Params]')' (Exp | CompoundStmt)
ReturnStmt -> 'return' [Exp] ';'
KeyStmt -> 'continue' | 'break'
Params -> Id {',' Id}
